/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyecto1.views;

import java.io.BufferedReader;
import java.util.ArrayList;
import java.util.Locale;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import proyecto1.controllers.AuthController;
import proyecto1.controllers.UserController;
import structures.FileUtils;
import structures.ListaDistribucion;
import structures.ListaUsuario;
import structures.DescriptorManager;
import structures.BitacoraEntry;
import structures.Contactos;
import proyecto1.controllers.ListaController;
import java.io.*;
import java.time.LocalDateTime;
import java.time.ZonedDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Locale;

/**
 *
 * @author carlo
 */
public class AdminDashboard extends javax.swing.JFrame {

    /**
     * Creates new form AdminDashboard
     */
    public AdminDashboard() {
        initComponents();
        DefaultListModel<String> modeloLista = new DefaultListModel<>();
        DefaultListModel<String> modeloListaContactos = new DefaultListModel<>();
        jListBuscados.setModel(modeloLista);
        jListContactosBuscados.setModel(modeloListaContactos);

    }

    public void cargarDatos(String user) {
        String[] datosUsuario = AuthController.getUserData(user);
        //cargar datos de la pestaña principal
        jLabelUsuario.setText("Usuario: " + datosUsuario[0]);
        jLabelNombre1.setText("Nombre: " + datosUsuario[2]);
        jLabelApellido1.setText("Apellido: " + datosUsuario[3]);
        jLabelFecNac1.setText("Fecha de Nacimiento: " + datosUsuario[4]);
        jLabelCorreo1.setText("Correo: " + datosUsuario[5]);
        jLabelTel1.setText("Telefono: " + datosUsuario[6]);
        Icon userImage = new ImageIcon(new ImageIcon(datosUsuario[7]).getImage()
                .getScaledInstance(lblImg.getWidth(), lblImg.getHeight(), 0));
        lblImg.setIcon(userImage);
        if (AuthController.checkUserPrivileges(datosUsuario[0])) {
            jLblTipoUsuario.setText("Tipo de Usuario: Administrador");
        } else {
            jLblTipoUsuario.setText("Tipo de Usuario: Usuario Normal");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JTabbedPane();
        jPanelGeneral = new javax.swing.JPanel();
        lblImg = new javax.swing.JLabel();
        jLabelUsuario = new javax.swing.JLabel();
        jLabelFecNac1 = new javax.swing.JLabel();
        jLabelApellido1 = new javax.swing.JLabel();
        jLabelNombre1 = new javax.swing.JLabel();
        jLabelCorreo1 = new javax.swing.JLabel();
        jLabelTel1 = new javax.swing.JLabel();
        jLblTipoUsuario = new javax.swing.JLabel();
        jBtnEdit = new javax.swing.JButton();
        jButtonBackup = new javax.swing.JButton();
        jTextFieldRutaBackup = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jPanelBuscarUsuario = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListBuscados = new javax.swing.JList<>();
        jTxtUserSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jBtnBuscar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jBtnEditar = new javax.swing.JButton();
        jBtnEliminar = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        JPanelContactos = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txtContactoBusqueda = new javax.swing.JTextField();
        btnBuscarUsuario = new javax.swing.JButton();
        btnBuscarNombre = new javax.swing.JButton();
        btnBuscarApellido = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListContactosBuscados = new javax.swing.JList<>();
        btnAgregarContacto = new javax.swing.JButton();
        btnEditContactos = new javax.swing.JButton();
        jPanelListaUsuario = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jTextFieldListaUsuario = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jButtonBuscarListaUsuario = new javax.swing.JButton();
        jButtonActualizarListaUsuario = new javax.swing.JButton();
        jButtonEliminarListaUsuarios = new javax.swing.JButton();
        jButtonIngresarUsuariosLista = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListUsuariosListaUsuarios = new javax.swing.JList<>();
        jLabel13 = new javax.swing.JLabel();
        jTextFieldBuscarListaUsuario = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jPanelListaDistribución = new javax.swing.JPanel();
        jTextFieldNombreLista = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        DescripcionList = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButtonCrearLista = new javax.swing.JButton();
        jButtonActualizarLista = new javax.swing.JButton();
        jButtonBuscarLista = new javax.swing.JButton();
        jButtonEliminarLista = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListDistribucion = new javax.swing.JList<>();
        jTextFieldDistribucion = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jButtonAgregarDistribucion = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListContactosLista = new javax.swing.JList<>();
        jButtonBuscarContactosLista = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabelUsuario.setText("Usuario:");

        jLabelFecNac1.setText("Fecha de Nacimiento:");

        jLabelApellido1.setText("Apellido:");

        jLabelNombre1.setText("Nombre:");

        jLabelCorreo1.setText("Correo:");

        jLabelTel1.setText("Telefono:");

        jLblTipoUsuario.setText("Tipo de Usuario:");

        jBtnEdit.setText("Editar Usuario");
        jBtnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditActionPerformed(evt);
            }
        });

        jButtonBackup.setText("Backup");
        jButtonBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackupActionPerformed(evt);
            }
        });

        jTextFieldRutaBackup.setText("Ruta");
        jTextFieldRutaBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldRutaBackupActionPerformed(evt);
            }
        });

        jButton2.setText("Darse de baja");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelGeneralLayout = new javax.swing.GroupLayout(jPanelGeneral);
        jPanelGeneral.setLayout(jPanelGeneralLayout);
        jPanelGeneralLayout.setHorizontalGroup(
            jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblImg, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                            .addComponent(jTextFieldRutaBackup)
                            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jButtonBackup)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLblTipoUsuario)
                            .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabelNombre1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelApellido1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelFecNac1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                                .addComponent(jLabelCorreo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabelTel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(jButton2)))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanelGeneralLayout.setVerticalGroup(
            jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneralLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblImg, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelGeneralLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabelUsuario)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelNombre1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelApellido1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelFecNac1)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelCorreo1)))
                .addGap(18, 18, 18)
                .addComponent(jLabelTel1)
                .addGap(18, 18, 18)
                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblTipoUsuario)
                    .addComponent(jTextFieldRutaBackup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelGeneralLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnEdit)
                    .addComponent(jButtonBackup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(35, Short.MAX_VALUE))
        );

        jPanel.addTab("General", jPanelGeneral);

        jListBuscados.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jListBuscados);

        jTxtUserSearch.setText("Ej: japerez");

        jLabel1.setText("Introduce el nombre del usuario a buscar");

        jBtnBuscar.setText("Buscar");
        jBtnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnBuscarActionPerformed(evt);
            }
        });

        jLabel2.setText("Listado de Usuarios, seleccione el que quiere editar o quitar");

        jBtnEditar.setText("Editar");
        jBtnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEditarActionPerformed(evt);
            }
        });

        jBtnEliminar.setText("Eliminar");
        jBtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnEliminarActionPerformed(evt);
            }
        });

        jButton1.setText("Ingresar Nuevo Usuario");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelBuscarUsuarioLayout = new javax.swing.GroupLayout(jPanelBuscarUsuario);
        jPanelBuscarUsuario.setLayout(jPanelBuscarUsuarioLayout);
        jPanelBuscarUsuarioLayout.setHorizontalGroup(
            jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                        .addGroup(jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                                .addGroup(jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                                        .addComponent(jScrollPane1)
                                        .addGap(33, 33, 33))
                                    .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                                        .addComponent(jTxtUserSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
                                        .addGap(27, 27, 27)))
                                .addGroup(jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jBtnEditar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jBtnEliminar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                    .addComponent(jBtnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGap(22, 199, Short.MAX_VALUE))))
        );
        jPanelBuscarUsuarioLayout.setVerticalGroup(
            jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTxtUserSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnBuscar))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(5, 5, 5)
                .addGroup(jPanelBuscarUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelBuscarUsuarioLayout.createSequentialGroup()
                        .addComponent(jBtnEditar)
                        .addGap(18, 18, 18)
                        .addComponent(jBtnEliminar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(26, 26, 26))
        );

        jPanel.addTab("Usuarios", jPanelBuscarUsuario);

        jLabel3.setText("Buscar Contactos");

        btnBuscarUsuario.setText("Buscar Por Usuario");
        btnBuscarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarUsuarioActionPerformed(evt);
            }
        });

        btnBuscarNombre.setText("Buscar Por Nombre");
        btnBuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarNombreActionPerformed(evt);
            }
        });

        btnBuscarApellido.setText("Buscar Por Apellido");
        btnBuscarApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarApellidoActionPerformed(evt);
            }
        });

        jLabel4.setText("Resultados:");

        jListContactosBuscados.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jListContactosBuscados);

        btnAgregarContacto.setText("Agregar Contacto");
        btnAgregarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarContactoActionPerformed(evt);
            }
        });

        btnEditContactos.setText("Editar Mis Contactos");
        btnEditContactos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditContactosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JPanelContactosLayout = new javax.swing.GroupLayout(JPanelContactos);
        JPanelContactos.setLayout(JPanelContactosLayout);
        JPanelContactosLayout.setHorizontalGroup(
            JPanelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelContactosLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(JPanelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanelContactosLayout.createSequentialGroup()
                        .addGroup(JPanelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtContactoBusqueda)
                            .addGroup(JPanelContactosLayout.createSequentialGroup()
                                .addComponent(btnBuscarNombre)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 145, Short.MAX_VALUE)
                                .addComponent(btnBuscarApellido)
                                .addGap(44, 44, 44)
                                .addComponent(btnBuscarUsuario)))
                        .addGap(58, 58, 58))
                    .addGroup(JPanelContactosLayout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(554, Short.MAX_VALUE))))
            .addGroup(JPanelContactosLayout.createSequentialGroup()
                .addGroup(JPanelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelContactosLayout.createSequentialGroup()
                        .addGap(218, 218, 218)
                        .addComponent(btnAgregarContacto))
                    .addGroup(JPanelContactosLayout.createSequentialGroup()
                        .addGap(232, 232, 232)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(JPanelContactosLayout.createSequentialGroup()
                .addGap(160, 160, 160)
                .addComponent(btnEditContactos, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        JPanelContactosLayout.setVerticalGroup(
            JPanelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelContactosLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtContactoBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(JPanelContactosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBuscarUsuario)
                    .addComponent(btnBuscarNombre)
                    .addComponent(btnBuscarApellido))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAgregarContacto)
                .addGap(18, 18, 18)
                .addComponent(btnEditContactos)
                .addContainerGap(55, Short.MAX_VALUE))
        );

        jPanel.addTab("Contactos", JPanelContactos);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Lista de Usuarios");

        jLabel9.setText("Ingresa el usuario");

        jButtonBuscarListaUsuario.setText("Buscar Listas");
        jButtonBuscarListaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarListaUsuarioActionPerformed(evt);
            }
        });

        jButtonActualizarListaUsuario.setText("Actualizar Lista de Usuarios");
        jButtonActualizarListaUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarListaUsuarioActionPerformed(evt);
            }
        });

        jButtonEliminarListaUsuarios.setText("Eliminar Lista de Usuarios");
        jButtonEliminarListaUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarListaUsuariosActionPerformed(evt);
            }
        });

        jButtonIngresarUsuariosLista.setText("Registrar Nuevo Usuario");
        jButtonIngresarUsuariosLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIngresarUsuariosListaActionPerformed(evt);
            }
        });

        jListUsuariosListaUsuarios.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jListUsuariosListaUsuarios);

        jLabel13.setText("Ingresa nombre de lista:");

        jButton3.setText("Ordenar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelListaUsuarioLayout = new javax.swing.GroupLayout(jPanelListaUsuario);
        jPanelListaUsuario.setLayout(jPanelListaUsuarioLayout);
        jPanelListaUsuarioLayout.setHorizontalGroup(
            jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                .addGroup(jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(jLabel8))
                    .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                                .addComponent(jButtonIngresarUsuariosLista)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonActualizarListaUsuario)
                                .addGap(18, 18, 18)
                                .addComponent(jButtonEliminarListaUsuarios))
                            .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                                .addGroup(jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(43, 43, 43)
                                        .addComponent(jTextFieldListaUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(jButtonBuscarListaUsuario)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldBuscarListaUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 61, Short.MAX_VALUE))
        );
        jPanelListaUsuarioLayout.setVerticalGroup(
            jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListaUsuarioLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextFieldListaUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBuscarListaUsuario)
                    .addComponent(jButton3))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jTextFieldBuscarListaUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanelListaUsuarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonActualizarListaUsuario)
                    .addComponent(jButtonEliminarListaUsuarios)
                    .addComponent(jButtonIngresarUsuariosLista))
                .addContainerGap(78, Short.MAX_VALUE))
        );

        jPanel.addTab("Lista de Usuarios", jPanelListaUsuario);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Lista distribución");

        DescripcionList.setColumns(20);
        DescripcionList.setRows(5);
        jScrollPane3.setViewportView(DescripcionList);

        jLabel6.setText("Nombre Lista:");

        jLabel7.setText("Descripción:");

        jButtonCrearLista.setText("Crear Lista");
        jButtonCrearLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCrearListaActionPerformed(evt);
            }
        });

        jButtonActualizarLista.setText("Actualizar Lista");
        jButtonActualizarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarListaActionPerformed(evt);
            }
        });

        jButtonBuscarLista.setText("Buscar lista");
        jButtonBuscarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarListaActionPerformed(evt);
            }
        });

        jButtonEliminarLista.setText("Eliminar Lista");
        jButtonEliminarLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarListaActionPerformed(evt);
            }
        });

        jListDistribucion.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jListDistribucion);

        jTextFieldDistribucion.setText("Ingrese Usuario");

        jLabel10.setText("Búsqueda por usuario:");

        jButtonAgregarDistribucion.setText("Agregar Usuario");
        jButtonAgregarDistribucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarDistribucionActionPerformed(evt);
            }
        });

        jListContactosLista.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(jListContactosLista);

        jButtonBuscarContactosLista.setText("Buscar contactos");
        jButtonBuscarContactosLista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuscarContactosListaActionPerformed(evt);
            }
        });

        jLabel11.setText("Lista de contactos");

        jLabel12.setText("Lista de listas de distribución");

        javax.swing.GroupLayout jPanelListaDistribuciónLayout = new javax.swing.GroupLayout(jPanelListaDistribución);
        jPanelListaDistribución.setLayout(jPanelListaDistribuciónLayout);
        jPanelListaDistribuciónLayout.setHorizontalGroup(
            jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jLabel10)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelListaDistribuciónLayout.createSequentialGroup()
                                        .addComponent(jButtonCrearLista)
                                        .addGap(33, 33, 33)))
                                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldNombreLista, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextFieldDistribucion, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButtonAgregarDistribucion))))
                            .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                                        .addComponent(jButtonBuscarContactosLista)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonBuscarLista))
                                    .addComponent(jLabel11))
                                .addGap(35, 35, 35)
                                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                                        .addComponent(jButtonActualizarLista)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonEliminarLista))
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel12)))))
                    .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel5)))
                .addGap(90, 90, 90))
        );
        jPanelListaDistribuciónLayout.setVerticalGroup(
            jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(12, 12, 12)
                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextFieldNombreLista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelListaDistribuciónLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonCrearLista))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jTextFieldDistribucion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAgregarDistribucion))
                .addGap(23, 23, 23)
                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanelListaDistribuciónLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBuscarLista)
                    .addComponent(jButtonActualizarLista)
                    .addComponent(jButtonEliminarLista)
                    .addComponent(jButtonBuscarContactosLista))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jPanel.addTab("Envio Correo", jPanelListaDistribución);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String fotoPath = "";

    private void jBtnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditActionPerformed
        String textoUsuario = jLabelUsuario.getText();

        // Comprueba si el texto comienza con "Usuario: "
        if (textoUsuario.startsWith("Usuario: ")) {
            // Obtiene el nombre de usuario eliminando "Usuario: "
            String nombreUsuario = textoUsuario.substring("Usuario: ".length());

            // Pasa el nombre de usuario a la ventana de edición
            EditUser edit = new EditUser();
            edit.cargarDatos(nombreUsuario);
            edit.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "El texto no tiene el formato esperado.");
        }
    }//GEN-LAST:event_jBtnEditActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        LoginFrame register = new LoginFrame();
        register.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jBtnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnBuscarActionPerformed

        String datosUsuario = UserController.getDataPlane(jTxtUserSearch.getText());
        DefaultListModel<String> modeloLista = (DefaultListModel<String>) jListBuscados.getModel();

        if (!datosUsuario.isEmpty()) {
            String[] datosPartidos = UserController.getAllUser(jTxtUserSearch.getText()).split("\\|");
            if (datosPartidos.length > 8 && !"0".equals(datosPartidos[8])) {
                modeloLista.clear();
                modeloLista.addElement(datosUsuario);
            } else {
                modeloLista.clear();
                modeloLista.addElement("No se encontraron datos");
            }
        } else {
            modeloLista.clear();
            modeloLista.addElement("No se encontraron datos");
        }
    }//GEN-LAST:event_jBtnBuscarActionPerformed

    private void jBtnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEditarActionPerformed
        String seleccionado = jListBuscados.getSelectedValue();

        if (seleccionado != null) {
            // Divide la cadena en partes usando el carácter "|"
            String[] partes = seleccionado.split("\\|");

            if (partes.length > 0) {
                // Obtiene la primera parte, que debería ser el nombre de usuario
                String nombreUsuario = partes[0].trim();

                // Pasa el nombre de usuario a la ventana de edición
                EditUser edit = new EditUser();
                edit.cargarDatos(nombreUsuario);
                edit.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el nombre de usuario en el elemento seleccionado.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ningún elemento seleccionado.");
        }

    }//GEN-LAST:event_jBtnEditarActionPerformed

    private void jBtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnEliminarActionPerformed

        String seleccionado = jListBuscados.getSelectedValue();
        DefaultListModel<String> modeloLista = (DefaultListModel<String>) jListBuscados.getModel();

        if (seleccionado != null) {
            // Divide la cadena en partes usando el carácter "|"
            String[] partes = seleccionado.split("\\|");

            if (partes.length > 0) {
                // Obtiene la primera parte, que debería ser el nombre de usuario
                String nombreUsuario = partes[0].trim();
                UserController.eliminarUsuario(nombreUsuario);
                modeloLista.clear();

            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el nombre de usuario en el elemento seleccionado.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ningún elemento seleccionado.");
        }
    }//GEN-LAST:event_jBtnEliminarActionPerformed

    private void jButtonBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackupActionPerformed

        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int option = fileChooser.showSaveDialog(this);

        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = fileChooser.getSelectedFile();
            String backupFolderPath = selectedDirectory.getAbsolutePath() + File.separator + "MEIA_Backup";

            File sourceFolder = new File("C:\\MEIA");
            File destinationFolder = new File(backupFolderPath);

            try {

                FileUtils.copyFolder(sourceFolder, destinationFolder);

                // Actualizar la interfaz de usuario
                jTextFieldRutaBackup.setText(backupFolderPath);

                // Obtener el primer usuario de "C:\\MEIA\\usuario.txt"
                String primerUsuario = FileUtils.usuarioCreacion();

                // Agregar entrada a la bitácora
                BitacoraEntry entry = new BitacoraEntry(backupFolderPath, primerUsuario);
                BitacoraEntry.addToBitacora(entry, "C:\\MEIA\\bitacora_backup.txt");

                // Actualizar el archivo descriptor
                DescriptorManager.updateDescriptor(primerUsuario, "C:\\MEIA\\desc_bitacora_backup.txt");

                // Muestra un mensaje al finalizar
                JOptionPane.showMessageDialog(this, "Archivos respaldados en la ubicación seleccionada.");
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al realizar la copia de seguridad.");
            }
        }
    }//GEN-LAST:event_jButtonBackupActionPerformed

    private void copyFolder(File source, File destination) throws IOException {
        if (source.isDirectory()) {
            if (!destination.exists()) {
                destination.mkdir();
            }

            String[] files = source.list();
            for (String file : files) {
                File srcFile = new File(source, file);
                File destFile = new File(destination, file);
                copyFolder(srcFile, destFile);
            }
        } else {
            Files.copy(source.toPath(), destination.toPath(), StandardCopyOption.REPLACE_EXISTING);
        }
    }
    private void jTextFieldRutaBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldRutaBackupActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldRutaBackupActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String textoUsuario = jLabelUsuario.getText();

        // Comprueba si el texto comienza con "Usuario: "
        if (textoUsuario.startsWith("Usuario: ")) {
            // Obtiene el nombre de usuario eliminando "Usuario: "
            String nombreUsuario = textoUsuario.substring("Usuario: ".length());
            UserController.eliminarUsuario(nombreUsuario);
            JOptionPane.showMessageDialog(this, "Se dio de baja");
            // Pasa el nombre de usuario a la ventana de edición
            EditUser edit = new EditUser();
            edit.cargarDatos(nombreUsuario);
            edit.setVisible(false);
            AdminDashboard admin = new AdminDashboard();
            admin.setVisible(false);
            dispose();
            StartFrame log = new StartFrame();
            log.setVisible(true);
            dispose();
        } else {
            JOptionPane.showMessageDialog(this, "El texto no tiene el formato esperado.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnBuscarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarUsuarioActionPerformed
        DefaultListModel<String> modeloListaContactos = (DefaultListModel<String>) jListContactosBuscados.getModel();
        if (!"".equals(txtContactoBusqueda.getText()) && txtContactoBusqueda.getText() != null) {
            String Usuario = txtContactoBusqueda.getText();
            String Information = UserController.getContactoByUser(Usuario);
            if (Information.length() > 0 && !Information.contains("null")) {
                modeloListaContactos.clear();
                modeloListaContactos.addElement(Information);
            } else {
                modeloListaContactos.clear();
                modeloListaContactos.addElement("No se encontraron datos");
            }
        }else{
             modeloListaContactos.clear();
             modeloListaContactos.addElement("No se encontraron datos");
        }
    }//GEN-LAST:event_btnBuscarUsuarioActionPerformed

    private void btnBuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarNombreActionPerformed
        DefaultListModel<String> modeloListaContactos = (DefaultListModel<String>) jListContactosBuscados.getModel();
        if (txtContactoBusqueda.getText() != null) {
            String Name = txtContactoBusqueda.getText();
            List<String[]> Information = UserController.getContactoByName(Name);
            if (!Information.isEmpty()) {

                for (int i = 0; i < Information.size(); i++) {
                    String[] userData = Information.get(i);

                    String user = userData[0];
                    String name = userData[2];
                    String lastName = userData[3];
                    modeloListaContactos.addElement(user + "|" + name + "|" + lastName);
                }

            } else {
                modeloListaContactos.clear();
                modeloListaContactos.addElement("No se encontraron datos");
            }
        }

    }//GEN-LAST:event_btnBuscarNombreActionPerformed

    private void btnBuscarApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarApellidoActionPerformed
        DefaultListModel<String> modeloListaContactos = (DefaultListModel<String>) jListContactosBuscados.getModel();
        if (txtContactoBusqueda.getText() != null) {
            String nameUser = txtContactoBusqueda.getText();
            List<String[]> Information = UserController.getContactoByName(nameUser);
            if (!Information.isEmpty()) {

                for (int i = 0; i < Information.size(); i++) {
                    String[] userData = Information.get(i);

                    String user = userData[0];
                    String name = userData[2];
                    String lastName = userData[3];
                    modeloListaContactos.addElement(user + "|" + name + "|" + lastName);
                }

            } else {
                modeloListaContactos.clear();
                modeloListaContactos.addElement("No se encontraron datos");
            }
        }
    }//GEN-LAST:event_btnBuscarApellidoActionPerformed

    private void btnAgregarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarContactoActionPerformed

        DefaultListModel<String> modeloListaContactos = (DefaultListModel<String>) jListContactosBuscados.getModel();
        String seleccionado = jListContactosBuscados.getSelectedValue();
        Contactos contacto = new Contactos();
        if (seleccionado != null) {
            // Divide la cadena en partes usando el carácter "|"
            String[] partes = seleccionado.split("\\|");

            if (partes.length > 0) {
                // Obtiene la primera parte, que debería ser el nombre de usuario
                String nombreContacto = partes[0].trim();
                String nombreUsuario = jLabelUsuario.getText().substring("Usuario: ".length());
                LocalDate fechaActual = LocalDate.now();
                DateTimeFormatter formato = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                String fechaFormateada = fechaActual.format(formato);
                
                contacto.setUsuario(nombreUsuario);
                contacto.setContacto(nombreContacto);
                contacto.setFechaTransaccion(fechaFormateada);
                contacto.setUsuarioTransaccion(nombreUsuario);
                contacto.setStatus(1);

                UserController.registerNewContact(contacto);
                JOptionPane.showMessageDialog(this, "Se agrego el nuevo contacto "+nombreContacto);
                
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el nombre de usuario en el elemento seleccionado.");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Ningún elemento seleccionado.");
        }
    }//GEN-LAST:event_btnAgregarContactoActionPerformed

    private void saveContactToFile(Contactos contacto) {
    try {
        String filePath = "C:/MEIA/contactos.txt";
        BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true));

        // Construye la cadena de datos del contacto
        String contactData = String.format("%s|%s|%s|%s|%s|%d",
            contacto.getUsuario(),
            contacto.getContacto(),
            contacto.getFechaTransaccion(),
            contacto.getUsuarioTransaccion(),
            contacto.getStatus());

        // Escribe la cadena en el archivo
        writer.write(contactData);
        writer.newLine();
        writer.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
    }
    
    private void btnEditContactosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditContactosActionPerformed
         String textoUsuario = jLabelUsuario.getText();

        // Comprueba si el texto comienza con "Usuario: "
        if (textoUsuario.startsWith("Usuario: ")) {
            // Obtiene el nombre de usuario eliminando "Usuario: "
            String nombreUsuario = textoUsuario.substring("Usuario: ".length());

            // Pasa el nombre de usuario a la ventana de edición
            Contacts edit = new Contacts(nombreUsuario);
            edit.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "El texto no tiene el formato esperado.");
        }
    }//GEN-LAST:event_btnEditContactosActionPerformed

    private void jButtonCrearListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCrearListaActionPerformed
    // Obtiene el texto de los campos de texto
    String nombreLista = jTextFieldNombreLista.getText();
    String descripcion = DescripcionList.getText();
    if(!"".equals(nombreLista)){
          // Llama al método para registrar la lista de distribución y obtener el nombre de usuario
    String usuario = asociarUsuarioALista(nombreLista, descripcion);

    if (usuario != null) {
        registrarListaDistribucion(nombreLista, usuario, descripcion);
        
        // Crear el archivo .txt vacío en la ruta "C:\MEIA\ListasDistribucion"
        String rutaArchivo = "C:\\MEIA\\ListasDistribucion\\" + nombreLista + ".txt";
        try {
            File archivoLista = new File(rutaArchivo);
            if (archivoLista.createNewFile()) {
                JOptionPane.showMessageDialog(this, "Lista creada con éxito.");
                
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo crear el archivo de la lista.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al crear el archivo de la lista.");
        }
    } else {
        // Maneja el caso en el que no se pueda obtener el nombre del usuario
        JOptionPane.showMessageDialog(this, "No se pudo obtener el nombre del usuario.");
    } 
    }else{
      JOptionPane.showMessageDialog(this, "Ingrese un nombre para la lista");

    }
  
    }//GEN-LAST:event_jButtonCrearListaActionPerformed

    private void jButtonActualizarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarListaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonActualizarListaActionPerformed

    private void jButtonBuscarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarListaActionPerformed
        // TODO add your handling code here:
        String valorBuscado = jTextFieldDistribucion.getText();  // Obtiene el valor del jTextFieldDistribucion

    DefaultListModel<String> model = new DefaultListModel<>();  // Crea un modelo para el jListContactosLista

    // Lee el archivo "C:\MEIA\lista.txt" y agrega los registros que cumplen con las condiciones al modelo
    try (BufferedReader reader = new BufferedReader(new FileReader("C:/MEIA/lista.txt"))) {
        String linea;
        while ((linea = reader.readLine()) != null) {
            String[] partes = linea.split("\\|");
            if (partes.length >= 6 && partes[1].equals(valorBuscado) && partes[5].equals("1")) {
                model.addElement(linea);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    // Asigna el modelo al jListContactosLista para mostrar los registros que cumplen con las condiciones
    jListContactosLista.setModel(model);
    }//GEN-LAST:event_jButtonBuscarListaActionPerformed

    private void jButtonEliminarListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarListaActionPerformed
        // TODO add your handling code here:
        // Obtiene el valor ingresado en el jTextFieldNombreLista
    String nombreLista = jTextFieldNombreLista.getText();
    
    // Crea la ruta del archivo a eliminar en "C:\MEIA\ListasDistribucion"
    String rutaArchivo = "C:/MEIA/ListasDistribucion/" + nombreLista + ".txt";

    // Verifica si el archivo existe antes de eliminarlo
    File archivo = new File(rutaArchivo);
    if (archivo.exists() && archivo.isFile()) {
        // Elimina el archivo si existe
        if (archivo.delete()) {
            // Actualiza el sexto valor en el archivo "lista.txt"
            actualizarValorLista2(nombreLista);

            // Muestra un mensaje de éxito
            JOptionPane.showMessageDialog(this, "Lista eliminada con éxito.");
        } else {
            // EN el caso en que no se pudo eliminar el archivo
            JOptionPane.showMessageDialog(this, "Error al eliminar la lista.");
        }
    } else {
        // EN el caso en que el archivo no existe
        JOptionPane.showMessageDialog(this, "La lista no existe.");
    }
    }//GEN-LAST:event_jButtonEliminarListaActionPerformed

    private void actualizarValorLista2(String nombreLista) {
    String rutaLista = "C:/MEIA/lista.txt";
    List<String> lineas = new ArrayList<>();
    try (BufferedReader reader = new BufferedReader(new FileReader(rutaLista))) {
        String linea;
        while ((linea = reader.readLine()) != null) {
            String[] partes = linea.split("\\|");
            if (partes.length >= 1 && partes[0].equals(nombreLista)) {
                partes[5] = "0";
                linea = String.join("|", partes);
            }
            lineas.add(linea);
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaLista))) {
        for (String l : lineas) {
            writer.write(l);
            writer.newLine();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}
    
    private void jButtonBuscarListaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarListaUsuarioActionPerformed
    // Obtiene el usuario proporcionado en el jTextFieldListaUsuario
    String usuario = jTextFieldListaUsuario.getText();

    // Crea una instancia de ListaController
    ListaController listaController = new ListaController();

    // Llama al método para buscar usuarios asociados al usuario proporcionado
    List<String> usuariosAsociados = listaController.buscarUsuariosAsociados(usuario);

    // Hace un clear al jListUsuariosListaUsuarios
    DefaultListModel<String> model = new DefaultListModel<>();
    jListUsuariosListaUsuarios.setModel(model);

    // Agrega los usuarios asociados encontrados al jListUsuariosListaUsuarios
    for (String usuarioAsociado : usuariosAsociados) {
        model.addElement(usuarioAsociado);
    }
    }//GEN-LAST:event_jButtonBuscarListaUsuarioActionPerformed

    private void jButtonActualizarListaUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarListaUsuarioActionPerformed
        // Obtiene el usuario proporcionado en el jTextFieldListaUsuario
    String usuario = jTextFieldListaUsuario.getText();

    // Crea una instancia de ListaController
    ListaController listaController = new ListaController(); 

    // Llama al método para buscar usuarios asociados al usuario proporcionado
    List<String> usuariosAsociados = listaController.buscarUsuariosAsociados(usuario);

    // Limpia el jListUsuariosListaUsuarios
    DefaultListModel<String> model = new DefaultListModel<>();
    jListUsuariosListaUsuarios.setModel(model);

    // Agrega los usuarios asociados encontrados al jListUsuariosListaUsuarios
    for (String usuarioAsociado : usuariosAsociados) {
        model.addElement(usuarioAsociado);
    }

    
    String selectedUser = jListUsuariosListaUsuarios.getSelectedValue(); // Esto obtiene el usuario asociado seleccionado

    if (selectedUser != null) {
        String[] partes = selectedUser.split("\\|");
        String nombreLista = partes[3]; // Obtiene el valor del nombre de la lista del usuario seleccionado
        String usuarioAsociado = partes[4]; // Obtiene el valor del usuario asociado del usuario seleccionado

        

        // Refresca el jListUsuariosListaUsuarios para mostrar los cambios si es necesario.
        model.clear();
        List<String> updatedUsuariosAsociados = listaController.buscarUsuariosAsociados(usuario);
        for (String updatedUsuarioAsociado : updatedUsuariosAsociados) {
            model.addElement(updatedUsuarioAsociado);
        }
    }
    }//GEN-LAST:event_jButtonActualizarListaUsuarioActionPerformed

    private void jButtonEliminarListaUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarListaUsuariosActionPerformed
    
            // Obtén los valores de usuarioBuscado y nombreLista
    String usuarioBuscado = jTextFieldListaUsuario.getText();
    String nombreLista = jTextFieldBuscarListaUsuario.getText();
    String bloquePath = "C:\\MEIA\\ListaUsuario\\Bloque.txt";
    String listaUsuarioPath = "C:\\MEIA\\Lista_usuario.txt";

    eliminarListaUsuarios(listaUsuarioPath, bloquePath, usuarioBuscado, nombreLista);
    }//GEN-LAST:event_jButtonEliminarListaUsuariosActionPerformed

    
    
    private void jButtonBuscarContactosListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuscarContactosListaActionPerformed
        // TODO add your handling code here:
        String valorBuscado = jTextFieldDistribucion.getText();  // Obtiene el valor del jTextFieldDistribucion

    DefaultListModel<String> model = new DefaultListModel<>();  

    // Lee el archivo "C:\MEIA\contactos.txt" 
    try (BufferedReader reader = new BufferedReader(new FileReader("C:/MEIA/contactos.txt"))) {
        String linea;
        while ((linea = reader.readLine()) != null) {
            String[] partes = linea.split("\\|");
            if (partes.length >= 5 && partes[3].equals(valorBuscado) && partes[4].equals("1")) {
                model.addElement(linea);
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    // Asigna el modelo al jListDistribucion para que se muetsren
    jListDistribucion.setModel(model);

    }//GEN-LAST:event_jButtonBuscarContactosListaActionPerformed

    ArrayList<String> lines = new ArrayList<>();

    
    private void jButtonAgregarDistribucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarDistribucionActionPerformed
String nombreLista = jTextFieldNombreLista.getText().trim();
String valorDistribucion = jTextFieldDistribucion.getText().trim();

// Validación de la entrada del usuario
if (nombreLista.isEmpty() || valorDistribucion.isEmpty()) {
    JOptionPane.showMessageDialog(this, "El nombre de la lista y el valor de distribución no pueden estar vacíos.");
    return;
}
if (nombreLista.matches(".*[\\/:*?\"<>|].*")) {
    JOptionPane.showMessageDialog(this, "El nombre de la lista contiene caracteres inválidos.");
    return;
}

// Crea la ruta del archivo correspondiente en "C:\MEIA\ListasDistribucion"
String rutaDirectorio = "C:/MEIA/ListasDistribucion";
String rutaArchivo = rutaDirectorio + "/" + nombreLista + ".txt";

File directorio = new File(rutaDirectorio);

// Verifica si el directorio existe y si no, intenta crearlo
if (!directorio.exists()) {
    if (!directorio.mkdirs()) {
        JOptionPane.showMessageDialog(this, "No se pudo crear el directorio para las listas de distribución.");
        return;
    }
}

try {
    // Agrega el valor de distribución al archivo correspondiente
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaArchivo, true))) {
        writer.write(valorDistribucion);
        writer.newLine();
    } 

    actualizarValorLista(nombreLista);

    JOptionPane.showMessageDialog(this, "Usuario agregado con éxito.");
} catch (IOException e) {
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error al agregar el usuario.");
}
    
    }//GEN-LAST:event_jButtonAgregarDistribucionActionPerformed

    private void jButtonIngresarUsuariosListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIngresarUsuariosListaActionPerformed
    // Obtiene los valores de los campos de texto
    String nombreLista = jTextFieldBuscarListaUsuario.getText();
    String descripcion = jTextFieldListaUsuario.getText();

    // Lee el contenido actual del archivo "Bloque.txt"
    String rutaBloque = "C:\\MEIA\\ListaUsuario\\Bloque.txt";
    String contenidoBloque = "";
    try {
        BufferedReader bloqueReader = new BufferedReader(new FileReader(rutaBloque));
        String linea;
        while ((linea = bloqueReader.readLine()) != null) {
            contenidoBloque += linea + "\n";
        }
        bloqueReader.close();
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al leer el archivo Bloque.txt.");
        return;
    }

    // Crea un nuevo registro usando los valores de los campos
    String nuevoRegistro = nombreLista + "|" + obtenerNombreUsuario() + "|" + obtenerNombreUsuario() + "|Descripcion|" + LocalDate.now() + "|1";

    // Escribe el nuevo registro en "Bloque.txt"
    try {
        BufferedWriter bloqueWriter = new BufferedWriter(new FileWriter(rutaBloque, true));
        bloqueWriter.write(nuevoRegistro);
        bloqueWriter.newLine();
        bloqueWriter.close();
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al escribir en el archivo Bloque.txt.");
        return;
    }

    // Lee el contenido actual del archivo "Lista_usuario.txt"
    String rutaListaUsuario = "C:\\MEIA\\Lista_usuario.txt";
    String contenidoListaUsuario = "";
    try {
        BufferedReader listaUsuarioReader = new BufferedReader(new FileReader(rutaListaUsuario));
        String linea;
        while ((linea = listaUsuarioReader.readLine()) != null) {
            contenidoListaUsuario += linea + "\n";
        }
        listaUsuarioReader.close();
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al leer el archivo Lista_usuario.txt.");
        return;
    }

    // Busca el registro adecuado y suma 1 al primer valor
    String usuario = obtenerNombreUsuario();
    String nuevoContenidoListaUsuario = "";
    String[] lineas = contenidoListaUsuario.split("\n");
    for (String linea : lineas) {
        String[] partes = linea.split("\\|");
        if (partes.length > 2 && partes[2].equals(usuario)) {
            // Encontramos el registro, suma 1 al primer valor
            int primerValor = Integer.parseInt(partes[0]) + 1;
            partes[0] = String.valueOf(primerValor);
        }
        nuevoContenidoListaUsuario += String.join("|", partes) + "\n";
    }

    // Escribe el contenido modificado de "Lista_usuario.txt"
    try {
        BufferedWriter listaUsuarioWriter = new BufferedWriter(new FileWriter(rutaListaUsuario));
        listaUsuarioWriter.write(nuevoContenidoListaUsuario);
        listaUsuarioWriter.close();
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al escribir en el archivo Lista_usuario.txt.");
        return;
    }

    JOptionPane.showMessageDialog(this, "Usuario agregado con éxito.");
    }//GEN-LAST:event_jButtonIngresarUsuariosListaActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
// Crea una instancia de ListaController
    ListaController listaController = new ListaController();

    // Llama al método para ordenar el archivo de lista de usuarios
    listaController.ordenarArchivoListaUsuarios();

    String usuario = jTextFieldListaUsuario.getText();

    // Llama al método para buscar usuarios asociados al usuario proporcionado
    List<String> usuariosAsociados = listaController.buscarUsuariosAsociados(usuario);

    // Hace un clear al jListUsuariosListaUsuarios y lo actualiza con la lista ordenada
    DefaultListModel<String> model = new DefaultListModel<>();
    for (String usuarioAsociado : usuariosAsociados) {
        model.addElement(usuarioAsociado);
    }
    jListUsuariosListaUsuarios.setModel(model);
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private final String bloqueFilePath = "C:/MEIA/ListaUsuario/Bloque.txt";
    private final String listaUsuarioFilePath = "C:/MEIA/Lista_usuario.txt";

    public boolean insertarRegistroBloque(String registroBloque) {
        try (FileWriter writer = new FileWriter(bloqueFilePath, true);
             BufferedWriter bufferedWriter = new BufferedWriter(writer)) {
            // Agrega el nuevo registro al archivo "Bloque.txt"
            bufferedWriter.write(registroBloque);
            bufferedWriter.newLine();
            return true;
        } catch (IOException e) {
            e.printStackTrace();
            return false;
        }
    }

    public boolean actualizarListaUsuario(String nombreLista) {
    List<String> lineas = new ArrayList<>();
    boolean actualizado = false;

    try (BufferedReader reader = new BufferedReader(new FileReader(listaUsuarioFilePath))) {
        String linea;
        while ((linea = reader.readLine()) != null) {
            String[] partes = linea.split("\\|");
            if (partes.length >= 5 && partes[3].equals(nombreLista)) {
                try {
                    int quintoValor = Integer.parseInt(partes[4]);
                    quintoValor++; // Incrementar el quinto valor en 1
                    partes[4] = String.valueOf(quintoValor);
                    linea = String.join("|", partes);
                    actualizado = true;
                } catch (NumberFormatException ex) {
                    
                    ex.printStackTrace();
                    return false;
                }
            }
            lineas.add(linea);
        }

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(listaUsuarioFilePath))) {
            for (String l : lineas) {
                writer.write(l);
                writer.newLine();
            }
        }
    } catch (IOException e) {
        e.printStackTrace();
        return false;
    }

    return actualizado;
    }
   
    private void actualizarValorLista(String nombreLista) {
    String rutaLista = "C:/MEIA/lista.txt";
    List<String> lineas = new ArrayList<>();
    
    try (BufferedReader reader = new BufferedReader(new FileReader(rutaLista))) {
        String linea;
        while ((linea = reader.readLine()) != null) {
            String[] partes = linea.split("\\|");
            if (partes.length >= 1 && partes[0].equals(nombreLista)) {
                try {
                    int valor = Integer.parseInt(partes[3]);
                    valor++;
                    partes[3] = Integer.toString(valor);
                    linea = String.join("|", partes);
                } catch (NumberFormatException ex) {
                    System.err.println("Error al convertir valor en línea: " + linea);
                    ex.printStackTrace();
                }
            }
            lineas.add(linea);
        }
    } catch (IOException e) {
        e.printStackTrace();
    }

    try (BufferedWriter writer = new BufferedWriter(new FileWriter(rutaLista))) {
        for (String l : lineas) {
            writer.write(l);
            writer.newLine();
        }
    } catch (IOException e) {
        e.printStackTrace();
    }
}

    
    private void registrarListaDistribucion(String nombreLista, String usuario, String descripcion){
        String path = "C:/MEIA/lista.txt"; 
        ListaController listaController = new ListaController();
        ListaDistribucion lista = new ListaDistribucion();
        lista.setNombreLista(nombreLista);
        lista.setUsuario(usuario);
        lista.setDescripcion(descripcion);
        lista.setNumeroUsuarios(0);
        lista.setFechaCreacion(new Date());
        lista.setEstatus(1);
        
        listaController.registrarLista(lista, path);
        
        
    }
 private String asociarUsuarioALista(String nombreLista, String descripcion) {
    String path = "C:/MEIA/Lista_usuario.txt";
    ListaUsuario listaUsuario = new ListaUsuario();
    ListaController controlador = new ListaController();

    String usuario = obtenerNombreUsuario(); 
    if (usuario != null) {
        listaUsuario.setNombre_lista(nombreLista);
        listaUsuario.setUsuario(usuario);
        listaUsuario.setUsuario_asociado(usuario);
        listaUsuario.setFecha_creacion(new Date());
        listaUsuario.setStatus(1);

        controlador.asociarUsuario(listaUsuario, path);

        // Crea el archivo "Bloque.txt" en la ruta "C:\MEIA\ListaUsuario"
        String rutaBloque = "C:\\MEIA\\ListaUsuario\\Bloque.txt";
        File archivoBloque = new File(rutaBloque);
        File directorio = archivoBloque.getParentFile();

        if (!directorio.exists()) {
            directorio.mkdirs(); 
        }

        if (!directorio.isDirectory()) {
            JOptionPane.showMessageDialog(this, "La ruta especificada no es un directorio.");
            return usuario;
        }

        try {
            if (!archivoBloque.exists()) {
                if (archivoBloque.createNewFile()) {
                    FileWriter writer = new FileWriter(archivoBloque);
                    writer.write(listaUsuario.getNombre_lista() + "|" + listaUsuario.getUsuario() + "|" + listaUsuario.getUsuario_asociado() + "|Descripcion|" + descripcion + "|" + listaUsuario.getFecha_creacion().toString() + "|" + listaUsuario.getStatus());
                    writer.close();
                } else {
                    FileWriter writer = new FileWriter(archivoBloque);
                    writer.write(listaUsuario.getNombre_lista() + "|" + listaUsuario.getUsuario() + "|" + listaUsuario.getUsuario_asociado() + "|Descripcion|" + descripcion + "|" + listaUsuario.getFecha_creacion().toString() + "|" + listaUsuario.getStatus());
                    writer.close();
                }
            } else {
                JOptionPane.showMessageDialog(this, "El archivo Bloque.txt ya existe.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al crear el archivo Bloque.txt.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "No se pudo asociar el usuario a la lista.");
    }

    return usuario;
}


    
    public String obtenerNombreUsuario(){
       try {
           
           BufferedReader br = new BufferedReader(new FileReader("C:\\MEIA\\usuario.txt"));
           String line = br.readLine();
           br.close();
           
           if (line != null)
           {
               String[] parts = line.split("\\|");
               if (parts.length > 0)
               {
                   return parts[0];
               }
           }
           
       } catch (IOException e){
           e.printStackTrace();
       } 
       
       return "UsuarioDesconocido";
    }
    
    private boolean isValidEmail(String email) {
        String regex = "^[A-Za-z0-9+_.-]+@(.+)$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(email);
        return matcher.matches();
    }

    private boolean isValidPhone(String phone) {
        String regex = "^\\d{8}$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(phone);
        return matcher.matches();
    }

    private boolean isValidDate(String date) {
        String regex = "^\\d{4}-\\d{2}-\\d{2}$";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(date);
        return matcher.matches();
    }

    private String getFileExtension(File file) {
        String extension = "";
        String fileName = file.getName();
        int lastIndex = fileName.lastIndexOf(".");
        if (lastIndex > 0) {
            extension = fileName.substring(lastIndex + 1).toLowerCase();
        }
        return extension;
    }
    
    
    private void eliminarListaUsuarios(String listaUsuarioPath, String bloquePath, String usuarioBuscado, String nombreLista) {
    try {
        // Lista para almacenar las líneas del archivo Bloque.txt
        List<String> bloqueLines = new ArrayList<>();
        // Lista para almacenar las líneas del archivo Lista_usuario.txt
        List<String> listaUsuarioLines = new ArrayList<>();

        // Lee el archivo Bloque.txt
        BufferedReader bloqueReader = new BufferedReader(new FileReader(bloquePath));
        String bloqueLine;
        while ((bloqueLine = bloqueReader.readLine()) != null) {
            String[] bloqueParts = bloqueLine.split("\\|");
            if (bloqueParts.length >= 2 && bloqueParts[1].equals(usuarioBuscado)) {
                // Cambiar el sexto valor a 0 (inactivo)
                bloqueParts[5] = "0";
                bloqueLine = String.join("|", bloqueParts);
            }
            bloqueLines.add(bloqueLine);
        }
        bloqueReader.close();

        // Escribir las líneas actualizadas en el archivo Bloque.txt
        BufferedWriter bloqueWriter = new BufferedWriter(new FileWriter(bloquePath));
        for (String line : bloqueLines) {
            bloqueWriter.write(line);
            bloqueWriter.newLine();
        }
        bloqueWriter.close();

        // Leer el archivo Lista_usuario.txt
        BufferedReader listaUsuarioReader = new BufferedReader(new FileReader(listaUsuarioPath));
        String listaUsuarioLine;
        while ((listaUsuarioLine = listaUsuarioReader.readLine()) != null) {
            String[] listaUsuarioParts = listaUsuarioLine.split("\\|");
            if (listaUsuarioParts.length >= 4 && listaUsuarioParts[3].equals(nombreLista)) {
                // Cambiar el octavo valor a 0 (inactivo)
                listaUsuarioParts[7] = "0";
                listaUsuarioLine = String.join("|", listaUsuarioParts);
            }
            listaUsuarioLines.add(listaUsuarioLine);
        }
        listaUsuarioReader.close();

        // Escribe las líneas actualizadas en el archivo Lista_usuario.txt
        BufferedWriter listaUsuarioWriter = new BufferedWriter(new FileWriter(listaUsuarioPath));
        for (String line : listaUsuarioLines) {
            listaUsuarioWriter.write(line);
            listaUsuarioWriter.newLine();
        }
        listaUsuarioWriter.close();

        JOptionPane.showMessageDialog(this, "Eliminado con éxito.");
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al eliminar.");
    }
}
 


    
    
    ZonedDateTime fechaActual = ZonedDateTime.now(ZoneId.of("America/Guatemala"));
    DateTimeFormatter formatoFecha = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss yyyy", Locale.ENGLISH);
    String fechaFormateada = fechaActual.format(formatoFecha);




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminDashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminDashboard().setVisible(true);

            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DescripcionList;
    private javax.swing.JPanel JPanelContactos;
    private javax.swing.JButton btnAgregarContacto;
    private javax.swing.JButton btnBuscarApellido;
    private javax.swing.JButton btnBuscarNombre;
    private javax.swing.JButton btnBuscarUsuario;
    private javax.swing.JButton btnEditContactos;
    private javax.swing.JButton jBtnBuscar;
    private javax.swing.JButton jBtnEdit;
    private javax.swing.JButton jBtnEditar;
    private javax.swing.JButton jBtnEliminar;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButtonActualizarLista;
    private javax.swing.JButton jButtonActualizarListaUsuario;
    private javax.swing.JButton jButtonAgregarDistribucion;
    private javax.swing.JButton jButtonBackup;
    private javax.swing.JButton jButtonBuscarContactosLista;
    private javax.swing.JButton jButtonBuscarLista;
    private javax.swing.JButton jButtonBuscarListaUsuario;
    private javax.swing.JButton jButtonCrearLista;
    private javax.swing.JButton jButtonEliminarLista;
    private javax.swing.JButton jButtonEliminarListaUsuarios;
    private javax.swing.JButton jButtonIngresarUsuariosLista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelApellido1;
    private javax.swing.JLabel jLabelCorreo1;
    private javax.swing.JLabel jLabelFecNac1;
    private javax.swing.JLabel jLabelNombre1;
    private javax.swing.JLabel jLabelTel1;
    private javax.swing.JLabel jLabelUsuario;
    private javax.swing.JLabel jLblTipoUsuario;
    private javax.swing.JList<String> jListBuscados;
    private javax.swing.JList<String> jListContactosBuscados;
    private javax.swing.JList<String> jListContactosLista;
    private javax.swing.JList<String> jListDistribucion;
    private javax.swing.JList<String> jListUsuariosListaUsuarios;
    private javax.swing.JTabbedPane jPanel;
    private javax.swing.JPanel jPanelBuscarUsuario;
    private javax.swing.JPanel jPanelGeneral;
    private javax.swing.JPanel jPanelListaDistribución;
    private javax.swing.JPanel jPanelListaUsuario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTextField jTextFieldBuscarListaUsuario;
    private javax.swing.JTextField jTextFieldDistribucion;
    private javax.swing.JTextField jTextFieldListaUsuario;
    private javax.swing.JTextField jTextFieldNombreLista;
    private javax.swing.JTextField jTextFieldRutaBackup;
    private javax.swing.JTextField jTxtUserSearch;
    private javax.swing.JLabel lblImg;
    private javax.swing.JTextField txtContactoBusqueda;
    // End of variables declaration//GEN-END:variables
}
